<!DOCTYPE html>
<html>
<head>
	<meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Smart Home</title>
  <%= Gon::Base.render_data %>
  <%= favicon_link_tag %>
  <%= stylesheet_link_tag    'application', media: 'all', 'data-turbolinks-track' => true %>
  <%= javascript_include_tag 'application', 'data-turbolinks-track' => true %>
  <%= csrf_meta_tags %>
</head>
<body>
<%= render 'layouts/navbar' %>
<% if user_signed_in? %>
<div id="mic" data-target="#myModal" data-toggle="modal"><%= fa_icon "microphone", style: "font-size: 25px;"%></div>
<%= render 'layouts/speech' %>
<% end %>

	<%if params[:controller] == 'pages' && params[:action] != 'welcome'%>
<div class="container-fluid">
	<div class= "row1">
	<% flash.each do |name, msg| %>
			<% if msg.is_a?(String) %>
				<div class="alert alert-<%= name == "notice" ? "success" : "danger"%> alert-dismissble">
					<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only"> Close</span></button>
					<%= content_tag :div,msg, :id=> "flash_#{name}" %>
				</div>
			<% end %>
      <% end %>
      <%= yield %>
    </div>
  </div>
      <% elsif params[:controller] == 'pages' && params[:action] == 'welcome' %>
      <% flash.each do |name, msg| %>
      <% if msg.is_a?(String) %>
        <div class="alert alert-<%= name == "notice" ? "success" : "danger"%> alert-dismissble" style="position:absolute;width:100%;">
          <button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only"> Close</span></button>
          <%= content_tag :div,msg, :id=> "flash_#{name}" %>
        </div>
      <% end %>
			<% end %>
	<%= yield %>
	<% else %>
  <div class="container-fluid">
	<div class="row">
		<%= render 'layouts/sidebar' %>
		<div class="col-sm-9 col-sm-offset-3 col-md-10 col-md-offset-2 main">
			<% flash.each do |name, msg| %>
			<% if msg.is_a?(String) %>
				<div class="alert alert-<%= name == "notice" ? "success" : "danger"%> alert-dismissble">
					<button type="button" class="close" data-dismiss="alert"><span aria-hidden="true">&times;</span><span class="sr-only"> Close</span></button>
					<%= content_tag :div,msg, :id=> "flash_#{name}" %>
				</div>
			<% end %>
		<% end %>
		<%= yield %>
	</div>
	</div>
</div>
	<% end %>

<script type="text/javascript">
if(gon.logged_in){
  var i,dev=new Array(),sen=new Array(),temp,humid;
  gon.watch('devices',{interval: 3000},function(devices){
    dev=[];
    for(i=0;i<devices.length;i++){
      var d = {id:devices[i].id,name:devices[i].name,state:devices[i].state};
      dev.push(d);
    }
  });
  gon.watch('sensors',{interval: 3000},function(sensors){
    sen=[];
    for(i=0;i<sensors.length;i++){
      var val = Math.round(sensors[i].value);
      if(sensors[i].name.toLowerCase() == "temperature"){
        temp = val;
      }
      else if(sensors[i].name.toLowerCase() == "humidity"){
        humid = val;
      }
      var s = {id:sensors[i].id,name:sensors[i].name,value:val};
      sen.push(s);
    }
  });
   var accessToken = "66b0de1a2ecd46afb4f25abcb9cc278c",
      subscriptionKey = "82cb8764-2927-45c5-8043-a614e9cd8a19",
      baseUrl = "https://api.api.ai/v1/",
      $speechInput,
      $recBtn,
      recognition,
      messageCouldntHear = "I couldn't hear you, could you say that again?",
      messageInternalError = "Oh no, there has been an internal server error",
      messageSorry = "I'm sorry, I don't have the answer to that yet.";
// Test browser support
window.SpeechRecognition = window.SpeechRecognition  ||
                              window.webkitSpeechRecognition ||
                                 null;
var results = [];
if (window.SpeechRecognition === null) {
  document.getElementById('ws-unsupported').classList.remove('hidden');
  var div = document.getElementById('button-play-ws');
  div.innerHTML = '<%= fa_icon "microphone-slash", style: "font-size: 25px;" %>';
  var div2 = document.getElementById('mic');
  div2.innerHTML = '<%= fa_icon "microphone-slash", style: "font-size: 25px;" %>';
  div2.className += "disabled";
  document.getElementById('button-play-ws').setAttribute('disabled', 'disabled');
  document.getElementById('button-stop-ws').setAttribute('disabled', 'disabled');
} 
else {  
  var recognizer = new window.SpeechRecognition();
  var transcription = document.getElementById('transcription');
  var log = document.getElementById('log');
  // Recogniser doesn't stop listening even if the user pauses
  // recognizer.continuous = true;
  // Start recognising
  recognizer.onresult = function(event) {
    transcription.textContent = '';
    log.innerHTML = '';
    results.push(event.results);
    results.reverse();
    results.forEach(function(val,i){
      var el = val[0][0].transcript.toLowerCase();
      transcription.textContent = el;
      $.ajax({
        type: "POST",
        url: baseUrl + "query/",
        contentType: "application/json; charset=utf-8",
        dataType: "json",
        headers: {
          "Authorization": "Bearer " + accessToken,
          "ocp-apim-subscription-key": subscriptionKey
        },
        data: JSON.stringify({q: el, lang: "en"}),
        success: function(data) {
          prepareResponse(data);
        },
        error: function() {
          log.innerHTML = messageInternalError;
        }
      });
    });
    results = [];
  };
  function prepareResponse(val) {
      var debugJSON = JSON.stringify(val, undefined, 2),
        spokenResponse = val.result.speech,i,match=0;
        if (spokenResponse == ""){
          spokenResponse = val.result.metadata.html;
        }
        else{
          if(val.result.parameters.device){
            for(i=0;i<dev.length;i++) {
              if(dev[i].name.toLowerCase().search(val.result.parameters.device)!= -1){
                var id = dev[i].id;
                match++;
                if(val.result.action == "turnon"){
                  if(dev[i].state){
                    log.innerHTML = "The device is already on.";
                  }
                  else{
                    $.get("/devices/turn_on",{"id":id});
                    log.innerHTML = spokenResponse;  
                  }
                }
                else if(val.result.action == "turnoff"){
                  if(dev[i].state){
                    $.get("/devices/turn_off",{"id":id});
                    log.innerHTML = spokenResponse;
                  }
                  else{
                     log.innerHTML = "The device is already off.";
                  }
                }
              }
            }
            if(val.result.parameters.device == "all devices"){
                match++;
                if(val.result.action == "turnon"){
                  $.get("/devices/turn_on_all");
                  log.innerHTML = spokenResponse;
                }
                else if(val.result.action == "turnoff"){
                  $.get("/devices/turn_off_all");
                  log.innerHTML = spokenResponse;
                }
              }
            if(match==0){
              log.innerHTML = "Sorry but either you haven't added that device or you don't have permission to use it."
            }
          }
          else if(val.result.action == "checksensor"){
           for(i=0;i<sen.length;i++) {
                if(val.result.parameters.sensor == "temperature" && sen[i].name.toLowerCase() == "temperature"){
                  log.innerHTML = "The current room temperature is "+sen[i].value+"&deg;C";
                  match++;
                }
                else if(val.result.parameters.sensor == "humidity" && sen[i].name.toLowerCase() == "humidity"){
                  log.innerHTML = "The current humidity is "+sen[i].value+"%";
                  match++;
                }
                else if(val.result.parameters.sensor == "lpg" && sen[i].name.toLowerCase() == "lpg gas sensor"){
                  if(sen[i].value == 0){
                    log.innerHTML = "Currently the sensor is not detecting any leak";  
                  }
                  else{
                    log.innerHTML = "Alert! LPG gas leak detected.";  
                  }
                  match++;
                }
                else if(val.result.parameters.sensor == "co2" && sen[i].name.toLowerCase() == "co2 gas sensor"){
                  if(sen[i].value == 0){
                    log.innerHTML = "Currently the sensor is not detecting any leak";  
                  }
                  else{
                    log.innerHTML = "Alert! Something is burning in the house.";  
                  }
                  match++;
                }
            }
            if(val.result.parameters.sensor == "weather"){
                log.innerHTML = "The current room temperature is "+temp+"&deg;C and humidity is "+humid+'%';
                match++;
              }
            if(match==0){
              log.innerHTML = "Sorry but you haven't added that sensor."
            }
          }
        }
        if(log.innerHTML == ''){
          if(val.result.action){
            if(val.result.action.search("smalltalk") != -1 || val.result.action.search("name") != -1 ||Â val.result.action.search("calculator") != -1 || val.result.action.search("wisdom") != -1){
              log.innerHTML = spokenResponse;    
            }
          }
          else{
            log.innerHTML = messageSorry;
          }
        }
      console.log(debugJSON);
      document.getElementById('button-play-ws').style.color = "black";
    }

  // Listen for errors
  recognizer.onerror = function(event) {
    //log.innerHTML = 'Recognition error: ' + event.message + '<br />' + log.innerHTML;
    transcription.textContent = '';
    log.innerHTML = messageCouldntHear;
    document.getElementById('button-play-ws').style.color = "black";
  };
  var play = document.getElementById('button-play-ws');
  play.addEventListener('click', function() {play.style.color = "red";
    // Set if we need interim results
    recognizer.interimResults = document.querySelector('input[name="recognition-type"][value="interim"]').checked;
    recognizer.stop();
    try {
      transcription.textContent = 'Listening...';
      log.textContent = 'What can I do for you?';
      recognizer.start();
    } catch(ex) {
      log.innerHTML = messageCouldntHear;
      transcription.textContent = '';
      play.style.color = "black";
    }
  });
  document.getElementById('mic').addEventListener('click', function() {
      document.getElementById('button-play-ws').style.color="red";
      try {
      transcription.textContent = 'Listening...';
      log.textContent = 'What can I do for you?';
      recognizer.start();
    } catch(ex) {
      log.innerHTML = messageCouldntHear;
      transcription.textContent = '';
      document.getElementById('button-play-ws').style.color="black";
    }
  });
}
}
</script>
</body>
</html>
